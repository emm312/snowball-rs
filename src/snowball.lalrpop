use crate::frontend::ast::*;
use std::str::FromStr;

grammar;

// Snowball program structure: 
// -------------------------------------------------------------
//                               ┌────────┐
//                               ▼        │
//        ┌───────────── Source code──────┼─────────┐
//        │                │       │      │         │
//        │                │       │      │         │
// ┌──────▼────┐  ┌────────▼──┐  ┌─▼──────┴───┐  ┌──▼───────────┐
// │ Functions │  │Class defs.│  │Import stmt.│  │Variables decl│
// └──┬─────▲──┘  └──┬──┬─────┘  └────────────┘  └──▲──┬────────┘
//    │     │        │  │                           │  │
//    │     └────────┘  └───────────────────────────┘  │
//    │                                                │
//    │         ┌───────────────┐                      │
//    │         │               │                      │
//    │         │ ┌──────►┌─────┴──────┐               │
//    │         │ │       │Statements  ├──────┐        │
//    │        ┌▼─┴──┐    └────────────┘      │        │
//    └───────►│Block│                        │        │
//             └──┬──┘    ┌────────────┐◄─────┘        │
//                │       │Expressions │               │
//                └──────►└────────────┘◄──────────────┘

// wanna copy the grammar for my other lang and adapt it just some parts
// https://github.com/emm312/iron/blob/master/src/iron.lalrpop
FunctionDeclaration: Node = { // func args are pain
    "fn" <identifier: Ident> "(" <args: FuncArgs> ")" => Node::FunctionDeclaration { name: identifier, args, body: Vec::new() }
}

Block: Block = {

}

FuncArgs: Vec<(String, String)> = {
    "(" <mut params: (<Ident> ":" <Ident> ",")*> <last: (<Ident> ":" <Ident>)?> ")" => {
        params.extend(last.clone());
        params
    }, 
}

//GlobalFunction: Node = {
//    "static" <static_func:FunctionDeclaration>
//    "extern" <external_func:FunctionDeclaration> ";"
//}

ImportStatement: Node = {
    "use" <module:Ident> "::" <path:Ident*> => Node::ImportStatement { lib: module } // TODO: fix
}

pub Snowball: Vec<Node> = {
    RootParser*
}

RootParser: Node = {
    ImportStatement,
    FunctionDeclaration,
    //GlobalFunction
}

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
Ident: String = r"[a-zA-Z][a-zA-Z0-9_-]*" => <>.to_string();